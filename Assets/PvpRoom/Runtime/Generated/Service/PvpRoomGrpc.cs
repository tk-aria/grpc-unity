// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PvpRoom.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Scribble.Runtime.Model.Generated {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class PvpRoom
  {
    static readonly string __ServiceName = "PvpRoom.PvpRoom";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.UserId> __Marshaller_PvpRoom_UserId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.UserId.Parser));
    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.RoomInfo> __Marshaller_PvpRoom_RoomInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.RoomInfo.Parser));
    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.Null> __Marshaller_PvpRoom_Null = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.Null.Parser));
    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.RoomId> __Marshaller_PvpRoom_RoomId = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.RoomId.Parser));
    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.RoomUpdateStatus> __Marshaller_PvpRoom_RoomUpdateStatus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.RoomUpdateStatus.Parser));
    static readonly grpc::Marshaller<global::Scribble.Runtime.Model.Generated.StreamData> __Marshaller_PvpRoom_StreamData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Scribble.Runtime.Model.Generated.StreamData.Parser));

    static readonly grpc::Method<global::Scribble.Runtime.Model.Generated.UserId, global::Scribble.Runtime.Model.Generated.RoomInfo> __Method_CreateRoom = new grpc::Method<global::Scribble.Runtime.Model.Generated.UserId, global::Scribble.Runtime.Model.Generated.RoomInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRoom",
        __Marshaller_PvpRoom_UserId,
        __Marshaller_PvpRoom_RoomInfo);

    static readonly grpc::Method<global::Scribble.Runtime.Model.Generated.Null, global::Scribble.Runtime.Model.Generated.RoomInfo> __Method_GetRoomList = new grpc::Method<global::Scribble.Runtime.Model.Generated.Null, global::Scribble.Runtime.Model.Generated.RoomInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoomList",
        __Marshaller_PvpRoom_Null,
        __Marshaller_PvpRoom_RoomInfo);

    static readonly grpc::Method<global::Scribble.Runtime.Model.Generated.RoomId, global::Scribble.Runtime.Model.Generated.RoomInfo> __Method_GetRoomInfo = new grpc::Method<global::Scribble.Runtime.Model.Generated.RoomId, global::Scribble.Runtime.Model.Generated.RoomInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoomInfo",
        __Marshaller_PvpRoom_RoomId,
        __Marshaller_PvpRoom_RoomInfo);

    static readonly grpc::Method<global::Scribble.Runtime.Model.Generated.RoomInfo, global::Scribble.Runtime.Model.Generated.RoomUpdateStatus> __Method_SetRoomInfo = new grpc::Method<global::Scribble.Runtime.Model.Generated.RoomInfo, global::Scribble.Runtime.Model.Generated.RoomUpdateStatus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRoomInfo",
        __Marshaller_PvpRoom_RoomInfo,
        __Marshaller_PvpRoom_RoomUpdateStatus);

    static readonly grpc::Method<global::Scribble.Runtime.Model.Generated.StreamData, global::Scribble.Runtime.Model.Generated.StreamData> __Method_JoinRoom = new grpc::Method<global::Scribble.Runtime.Model.Generated.StreamData, global::Scribble.Runtime.Model.Generated.StreamData>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "JoinRoom",
        __Marshaller_PvpRoom_StreamData,
        __Marshaller_PvpRoom_StreamData);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Scribble.Runtime.Model.Generated.PvpRoomReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PvpRoom</summary>
    [grpc::BindServiceMethod(typeof(PvpRoom), "BindService")]
    public abstract partial class PvpRoomBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Scribble.Runtime.Model.Generated.RoomInfo> CreateRoom(global::Scribble.Runtime.Model.Generated.UserId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomList(global::Scribble.Runtime.Model.Generated.Null request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ルーム情報取得
      /// TODO: 検索条件等決める
      ///rpc SearchRoom (Null) returns (RoomInfoResponse) {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Scribble.Runtime.Model.Generated.RoomUpdateStatus> SetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomInfo request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bidirectional streaming RPCを用いてメッセージを交換する
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task JoinRoom(grpc::IAsyncStreamReader<global::Scribble.Runtime.Model.Generated.StreamData> requestStream, grpc::IServerStreamWriter<global::Scribble.Runtime.Model.Generated.StreamData> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PvpRoom</summary>
    public partial class PvpRoomClient : grpc::ClientBase<PvpRoomClient>
    {
      /// <summary>Creates a new client for PvpRoom</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PvpRoomClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PvpRoom that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PvpRoomClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PvpRoomClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PvpRoomClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo CreateRoom(global::Scribble.Runtime.Model.Generated.UserId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo CreateRoom(global::Scribble.Runtime.Model.Generated.UserId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRoom, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> CreateRoomAsync(global::Scribble.Runtime.Model.Generated.UserId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoomAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> CreateRoomAsync(global::Scribble.Runtime.Model.Generated.UserId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRoom, null, options, request);
      }
      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo GetRoomList(global::Scribble.Runtime.Model.Generated.Null request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo GetRoomList(global::Scribble.Runtime.Model.Generated.Null request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoomList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomListAsync(global::Scribble.Runtime.Model.Generated.Null request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomListAsync(global::Scribble.Runtime.Model.Generated.Null request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoomList, null, options, request);
      }
      /// <summary>
      /// ルーム情報取得
      /// TODO: 検索条件等決める
      ///rpc SearchRoom (Null) returns (RoomInfoResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo GetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ルーム情報取得
      /// TODO: 検索条件等決める
      ///rpc SearchRoom (Null) returns (RoomInfoResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Scribble.Runtime.Model.Generated.RoomInfo GetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomId request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoomInfo, null, options, request);
      }
      /// <summary>
      /// ルーム情報取得
      /// TODO: 検索条件等決める
      ///rpc SearchRoom (Null) returns (RoomInfoResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomInfoAsync(global::Scribble.Runtime.Model.Generated.RoomId request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoomInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ルーム情報取得
      /// TODO: 検索条件等決める
      ///rpc SearchRoom (Null) returns (RoomInfoResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomInfo> GetRoomInfoAsync(global::Scribble.Runtime.Model.Generated.RoomId request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoomInfo, null, options, request);
      }
      public virtual global::Scribble.Runtime.Model.Generated.RoomUpdateStatus SetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRoomInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Scribble.Runtime.Model.Generated.RoomUpdateStatus SetRoomInfo(global::Scribble.Runtime.Model.Generated.RoomInfo request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRoomInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomUpdateStatus> SetRoomInfoAsync(global::Scribble.Runtime.Model.Generated.RoomInfo request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRoomInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Scribble.Runtime.Model.Generated.RoomUpdateStatus> SetRoomInfoAsync(global::Scribble.Runtime.Model.Generated.RoomInfo request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRoomInfo, null, options, request);
      }
      /// <summary>
      /// Bidirectional streaming RPCを用いてメッセージを交換する
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Scribble.Runtime.Model.Generated.StreamData, global::Scribble.Runtime.Model.Generated.StreamData> JoinRoom(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinRoom(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bidirectional streaming RPCを用いてメッセージを交換する
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Scribble.Runtime.Model.Generated.StreamData, global::Scribble.Runtime.Model.Generated.StreamData> JoinRoom(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_JoinRoom, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PvpRoomClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PvpRoomClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PvpRoomBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateRoom, serviceImpl.CreateRoom)
          .AddMethod(__Method_GetRoomList, serviceImpl.GetRoomList)
          .AddMethod(__Method_GetRoomInfo, serviceImpl.GetRoomInfo)
          .AddMethod(__Method_SetRoomInfo, serviceImpl.SetRoomInfo)
          .AddMethod(__Method_JoinRoom, serviceImpl.JoinRoom).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PvpRoomBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateRoom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Scribble.Runtime.Model.Generated.UserId, global::Scribble.Runtime.Model.Generated.RoomInfo>(serviceImpl.CreateRoom));
      serviceBinder.AddMethod(__Method_GetRoomList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Scribble.Runtime.Model.Generated.Null, global::Scribble.Runtime.Model.Generated.RoomInfo>(serviceImpl.GetRoomList));
      serviceBinder.AddMethod(__Method_GetRoomInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Scribble.Runtime.Model.Generated.RoomId, global::Scribble.Runtime.Model.Generated.RoomInfo>(serviceImpl.GetRoomInfo));
      serviceBinder.AddMethod(__Method_SetRoomInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Scribble.Runtime.Model.Generated.RoomInfo, global::Scribble.Runtime.Model.Generated.RoomUpdateStatus>(serviceImpl.SetRoomInfo));
      serviceBinder.AddMethod(__Method_JoinRoom, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Scribble.Runtime.Model.Generated.StreamData, global::Scribble.Runtime.Model.Generated.StreamData>(serviceImpl.JoinRoom));
    }

  }
}
#endregion
