// <auto-generated>
//         Generated by the protocol buffer compiler.    DO NOT EDIT!
//         source: hellogrpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcUnity.Demo {
    public static partial class HelloGrpc
    {
        static readonly string __ServiceName = "google.protobuf.HelloGrpc";

        static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
        {
            #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (message is global::Google.Protobuf.IBufferMessage)
            {
                context.SetPayloadLength(message.CalculateSize());
                global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
                context.Complete();
                return;
            }
            #endif
            context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
        }

        static class __Helper_MessageCache<T>
        {
            public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
        }

        static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
        {
            #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
            if (__Helper_MessageCache<T>.IsBufferMessage)
            {
                return parser.ParseFrom(context.PayloadAsReadOnlySequence());
            }
            #endif
            return parser.ParseFrom(context.PayloadAsNewBuffer());
        }

        static readonly grpc::Marshaller<global::GrpcUnity.Demo.StreamData> __Marshaller_google_protobuf_StreamData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::GrpcUnity.Demo.StreamData.Parser));

        static readonly grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> __Method_TestResponce = new grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(
                grpc::MethodType.Unary,
                __ServiceName,
                "TestResponce",
                __Marshaller_google_protobuf_StreamData,
                __Marshaller_google_protobuf_StreamData);

        static readonly grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> __Method_TestClientSideStreaming = new grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(
                grpc::MethodType.ServerStreaming,
                __ServiceName,
                "TestClientSideStreaming",
                __Marshaller_google_protobuf_StreamData,
                __Marshaller_google_protobuf_StreamData);

        static readonly grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> __Method_TestServerSideStreaming = new grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(
                grpc::MethodType.ClientStreaming,
                __ServiceName,
                "TestServerSideStreaming",
                __Marshaller_google_protobuf_StreamData,
                __Marshaller_google_protobuf_StreamData);

        static readonly grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> __Method_TestBidirectionalStreaming = new grpc::Method<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(
                grpc::MethodType.DuplexStreaming,
                __ServiceName,
                "TestBidirectionalStreaming",
                __Marshaller_google_protobuf_StreamData,
                __Marshaller_google_protobuf_StreamData);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::GrpcUnity.Demo.HellogrpcReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of HelloGrpc</summary>
        [grpc::BindServiceMethod(typeof(HelloGrpc), "BindService")]
        public abstract partial class HelloGrpcBase
        {
            public virtual global::System.Threading.Tasks.Task<global::GrpcUnity.Demo.StreamData> TestResponce(global::GrpcUnity.Demo.StreamData request, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task TestClientSideStreaming(global::GrpcUnity.Demo.StreamData request, grpc::IServerStreamWriter<global::GrpcUnity.Demo.StreamData> responseStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task<global::GrpcUnity.Demo.StreamData> TestServerSideStreaming(grpc::IAsyncStreamReader<global::GrpcUnity.Demo.StreamData> requestStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task TestBidirectionalStreaming(grpc::IAsyncStreamReader<global::GrpcUnity.Demo.StreamData> requestStream, grpc::IServerStreamWriter<global::GrpcUnity.Demo.StreamData> responseStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for HelloGrpc</summary>
        public partial class HelloGrpcClient : grpc::ClientBase<HelloGrpcClient>
        {
            /// <summary>Creates a new client for HelloGrpc</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public HelloGrpcClient(grpc::ChannelBase channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for HelloGrpc that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public HelloGrpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected HelloGrpcClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected HelloGrpcClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            public virtual global::GrpcUnity.Demo.StreamData TestResponce(global::GrpcUnity.Demo.StreamData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return TestResponce(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual global::GrpcUnity.Demo.StreamData TestResponce(global::GrpcUnity.Demo.StreamData request, grpc::CallOptions options)
            {
                return CallInvoker.BlockingUnaryCall(__Method_TestResponce, null, options, request);
            }
            public virtual grpc::AsyncUnaryCall<global::GrpcUnity.Demo.StreamData> TestResponceAsync(global::GrpcUnity.Demo.StreamData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return TestResponceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncUnaryCall<global::GrpcUnity.Demo.StreamData> TestResponceAsync(global::GrpcUnity.Demo.StreamData request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncUnaryCall(__Method_TestResponce, null, options, request);
            }
            public virtual grpc::AsyncServerStreamingCall<global::GrpcUnity.Demo.StreamData> TestClientSideStreaming(global::GrpcUnity.Demo.StreamData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return TestClientSideStreaming(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncServerStreamingCall<global::GrpcUnity.Demo.StreamData> TestClientSideStreaming(global::GrpcUnity.Demo.StreamData request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncServerStreamingCall(__Method_TestClientSideStreaming, null, options, request);
            }
            public virtual grpc::AsyncClientStreamingCall<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> TestServerSideStreaming(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return TestServerSideStreaming(new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncClientStreamingCall<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> TestServerSideStreaming(grpc::CallOptions options)
            {
                return CallInvoker.AsyncClientStreamingCall(__Method_TestServerSideStreaming, null, options);
            }
            public virtual grpc::AsyncDuplexStreamingCall<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> TestBidirectionalStreaming(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return TestBidirectionalStreaming(new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncDuplexStreamingCall<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData> TestBidirectionalStreaming(grpc::CallOptions options)
            {
                return CallInvoker.AsyncDuplexStreamingCall(__Method_TestBidirectionalStreaming, null, options);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override HelloGrpcClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new HelloGrpcClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(HelloGrpcBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                    .AddMethod(__Method_TestResponce, serviceImpl.TestResponce)
                    .AddMethod(__Method_TestClientSideStreaming, serviceImpl.TestClientSideStreaming)
                    .AddMethod(__Method_TestServerSideStreaming, serviceImpl.TestServerSideStreaming)
                    .AddMethod(__Method_TestBidirectionalStreaming, serviceImpl.TestBidirectionalStreaming).Build();
        }

        /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the    service binding logic.
        /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
        /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static void BindService(grpc::ServiceBinderBase serviceBinder, HelloGrpcBase serviceImpl)
        {
            serviceBinder.AddMethod(__Method_TestResponce, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(serviceImpl.TestResponce));
            serviceBinder.AddMethod(__Method_TestClientSideStreaming, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(serviceImpl.TestClientSideStreaming));
            serviceBinder.AddMethod(__Method_TestServerSideStreaming, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(serviceImpl.TestServerSideStreaming));
            serviceBinder.AddMethod(__Method_TestBidirectionalStreaming, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::GrpcUnity.Demo.StreamData, global::GrpcUnity.Demo.StreamData>(serviceImpl.TestBidirectionalStreaming));
        }

    }
}
#endregion
